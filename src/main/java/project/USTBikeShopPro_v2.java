/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project;

import java.awt.Color;
import java.awt.Desktop;
import java.net.URI;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emman
 */
public class USTBikeShopPro_v2 extends javax.swing.JFrame {
    	// Max limit for bikes of a certain type
	static final int MAX_INVENTORY_SIZE_PER_TYPE = 100;
	static final int MAX_INVENTORY_SIZE = 500;
	// This is a settings variable for descriptive messages
	static boolean verboseMode = false;

        // bike arrays:
        static ArrayList <BasicBike> basicBikeArray = new ArrayList<BasicBike>(MAX_INVENTORY_SIZE_PER_TYPE);
	static ArrayList <MountainBike> mountainBikeArray = new ArrayList<MountainBike>(MAX_INVENTORY_SIZE_PER_TYPE);
	static ArrayList<RoadBike> roadBikeArray = new ArrayList<RoadBike>(MAX_INVENTORY_SIZE_PER_TYPE);
	static ArrayList<EBike> eBikeArray = new ArrayList<EBike>(MAX_INVENTORY_SIZE_PER_TYPE);
	static ArrayList<RoadEBike> roadEBikeArray = new ArrayList<RoadEBike>(MAX_INVENTORY_SIZE_PER_TYPE);
        // end of bike arrays-------------------------------------------
        
    /**
     * Creates new form NewJFrame
     */
    public USTBikeShopPro_v2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        d1 = new javax.swing.JButton();
        d2 = new javax.swing.JButton();
        d3 = new javax.swing.JButton();
        d4 = new javax.swing.JButton();
        d5 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        a1 = new javax.swing.JButton();
        a4 = new javax.swing.JButton();
        a5 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        r1 = new javax.swing.JButton();
        r3 = new javax.swing.JButton();
        r4 = new javax.swing.JButton();
        r5 = new javax.swing.JButton();
        m2 = new javax.swing.JButton();
        m3 = new javax.swing.JButton();
        m4 = new javax.swing.JButton();
        m5 = new javax.swing.JButton();
        m1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        display_table = new javax.swing.JTable();
        a2 = new javax.swing.JButton();
        a3 = new javax.swing.JButton();
        r2 = new javax.swing.JButton();
        enterText_toRemove = new javax.swing.JTextField();
        enterText_toModify = new javax.swing.JTextField();
        maxSpeedLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        voltageLabel = new javax.swing.JLabel();
        batterySLabel = new javax.swing.JLabel();
        motorLabel = new javax.swing.JLabel();
        milesLable = new javax.swing.JLabel();
        gearsLabel = new javax.swing.JLabel();
        safeLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        suspensionRadio = new javax.swing.JRadioButton();
        flatHandleRadio = new javax.swing.JRadioButton();
        flatProofRadio = new javax.swing.JRadioButton();
        batteryTLabel = new javax.swing.JLabel();
        safety_features = new javax.swing.JTextField();
        voltage = new javax.swing.JTextField();
        mSpeed = new javax.swing.JTextField();
        color = new javax.swing.JTextField();
        no_of_gears = new javax.swing.JTextField();
        miles = new javax.swing.JTextField();
        height = new javax.swing.JTextField();
        batterySize = new javax.swing.JTextField();
        batteryType = new javax.swing.JTextField();
        motorPower = new javax.swing.JTextField();
        secret = new javax.swing.JButton();
        hybridC = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));
        setForeground(java.awt.Color.lightGray);
        setPreferredSize(new java.awt.Dimension(977, 714));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        jLabel1.setText("Emmanuel's Bike shop");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 330, 25));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 1550, 10));

        d1.setText("display basic bikes");
        getContentPane().add(d1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 152, -1));
        d1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d1ActionPerformed(evt);
            }
        });

        d2.setText("display mountain bikes");
        getContentPane().add(d2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));
        // Code adding the component to the parent container - not shown here
        d2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d2ActionPerformed(evt);
            }
        });

        d3.setText("display road bikes");
        d3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d3ActionPerformed(evt);
            }
        });
        getContentPane().add(d3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 152, -1));

        d4.setText("display E-bikes");
        getContentPane().add(d4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 152, -1));
        // Code adding the component to the parent container - not shown here
        d4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d4ActionPerformed(evt);
            }
        });

        d5.setText("display road E-bikes");
        getContentPane().add(d5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 152, -1));
        // Code adding the component to the parent container - not shown here
        d5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d5ActionPerformed(evt);
            }
        });
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 299, -1, 6));

        a1.setText("add basic bike");
        getContentPane().add(a1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 147, -1));
        // Code adding the component to the parent container - not shown here
        a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a1ActionPerformed(evt);
            }
        });

        a4.setText("add E-bike");
        getContentPane().add(a4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, 147, -1));
        a4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a4ActionPerformed(evt);
            }
        });

        a5.setText("add road E-bike");
        getContentPane().add(a5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 230, 147, -1));
        a5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a5ActionPerformed(evt);
            }
        });

        jButton13.setText("methods to remove bikes;");
        getContentPane().add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1075, 80, -1, 0));

        r1.setText("remove basic bike");
        r1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r1ActionPerformed(evt);
            }
        });
        getContentPane().add(r1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 152, -1));

        r3.setText("remove road bike");
        getContentPane().add(r3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 152, -1));
        r3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r3ActionPerformed(evt);
            }
        });

        r4.setText("remove E-bike");
        getContentPane().add(r4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, 152, -1));
        r4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r4ActionPerformed(evt);
            }
        });

        r5.setText("remove road E-bike");
        getContentPane().add(r5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 152, -1));
        r5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r5ActionPerformed(evt);
            }
        });

        m2.setText("modify mountain bike");
        getContentPane().add(m2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, 165, -1));
        m2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m2ActionPerformed(evt);
            }
        });

        m3.setText("modify road bike");
        getContentPane().add(m3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 170, 165, -1));
        m3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m3ActionPerformed(evt);
            }
        });

        m4.setText("modify E-bike");
        getContentPane().add(m4, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 200, 165, -1));
        m4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m4ActionPerformed(evt);
            }
        });

        m5.setText("modify road E-bike");
        getContentPane().add(m5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 230, 165, -1));
        m5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m5ActionPerformed(evt);
            }
        });

        m1.setText("modify basic bike");
        getContentPane().add(m1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 165, -1));
        m1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m1ActionPerformed(evt);
            }
        });

        display_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        display_table.getTableHeader().setReorderingAllowed(false);
        display_table.setEnabled(false);
        jScrollPane6.setViewportView(display_table);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 319, 1244, -1));

        a2.setText("add mountain bike");
        getContentPane().add(a2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, 147, -1));
        // Code adding the component to the parent container - not shown here
        a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a2ActionPerformed(evt);
            }
        });

        a3.setText("add road bike");
        getContentPane().add(a3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, 147, -1));
        // Code adding the component to the parent container - not shown here
        a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a3ActionPerformed(evt);
            }
        });

        r2.setText("remove mountain bike");
        r2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2ActionPerformed(evt);
            }
        });
        getContentPane().add(r2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 152, -1));

        enterText_toRemove.setText("enter location of the bike");
        enterText_toRemove.setMinimumSize(new java.awt.Dimension(64, 17));
        enterText_toRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterText_toRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(enterText_toRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 152, -1));

        enterText_toModify.setText("enter location of the bike");
        enterText_toModify.setMinimumSize(new java.awt.Dimension(64, 17));
        enterText_toModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterText_toModifyActionPerformed(evt);
            }
        });
        getContentPane().add(enterText_toModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, 165, -1));

        maxSpeedLabel.setText("speed(int):");
        getContentPane().add(maxSpeedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 80, -1, -1));

        jLabel3.setText("seat height(int):");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 180, -1, -1));

        voltageLabel.setText("battery voltage(int):");
        getContentPane().add(voltageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 230, -1, -1));

        batterySLabel.setText("battery size(int):");
        getContentPane().add(batterySLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 230, -1, -1));

        motorLabel.setText("motor power(float):");
        getContentPane().add(motorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 230, -1, -1));

        milesLable.setText("range miles(int):");
        getContentPane().add(milesLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 230, -1, -1));

        gearsLabel.setText("gears(int):");
        getContentPane().add(gearsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 80, -1, -1));

        safeLabel.setText("safety features:");
        getContentPane().add(safeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 140, -1, -1));

        colorLabel.setText("color:");
        getContentPane().add(colorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 80, -1, -1));

        suspensionRadio.setText("full suspension");
        getContentPane().add(suspensionRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 180, -1, -1));

        flatHandleRadio.setText("flat hande bar");
        getContentPane().add(flatHandleRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 180, -1, -1));

        flatProofRadio.setText("flat proof tyres");
        getContentPane().add(flatProofRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 180, -1, -1));

        batteryTLabel.setText("battery type:");
        getContentPane().add(batteryTLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 230, -1, -1));
        getContentPane().add(safety_features, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 460, -1));
        getContentPane().add(voltage, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 250, 70, -1));
        getContentPane().add(mSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 100, 70, -1));
        getContentPane().add(color, new org.netbeans.lib.awtextra.AbsoluteConstraints(834, 100, 90, -1));
        getContentPane().add(no_of_gears, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 100, 70, -1));
        getContentPane().add(miles, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 250, 70, -1));
        getContentPane().add(height, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 70, -1));
        getContentPane().add(batterySize, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 250, 70, -1));
        getContentPane().add(batteryType, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 250, 110, -1));
        getContentPane().add(motorPower, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 250, 90, -1));

        secret.setText("verbose mode");
        getContentPane().add(secret, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 100, -1, -1));
        secret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secretActionPerformed(evt);
            }
        });

        hybridC.setText("hybrid comfort");
        getContentPane().add(hybridC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 180, -1, -1));
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1550, 10));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("enter the bike qualities for your bike, then click add or modify to submit those qualities");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("display bikes methods:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("remove bikes methods:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("add bikes methods:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("modify bike methods:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, -1, -1));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("boxes with int: enter a whole number.\nboxes with float: the number can have a decimal\nevery bike requires specific bike qualities. click the\ndisplay buttons to see what qualities the bike needs.\n");
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 50, 330, 100));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("help menu:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1380, 30, -1, -1));

        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("to modify a bike enter the location of  bike in the text\nbox underneath the modify buttons, then enter the\nqualities of the bike, and press the modify buttons.");
        jScrollPane3.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 160, 330, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel9.setText("you cannot add more than 100");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 260, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
// display action events--------------------------------------------------------
    private void d1ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        displayBikes("basic");
    }  
    private void d2ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        displayBikes("mountain");
    } 
    private void d3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d3ActionPerformed
        // TODO add your handling code here:
        displayBikes("road");
    }//GEN-LAST:event_d3ActionPerformed
    private void d4ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        displayBikes("ebike");
    } 
    private void d5ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        displayBikes("roadEbike");
    } 

//------------------------------------------------------------------------------
    
// adder action events----------------------------------------------------------
    private void a1ActionPerformed(java.awt.event.ActionEvent evt) { 
            if(basicBikeArray.size() != 100)
            {
            try{
             BasicBike e = new BasicBike(Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
             basicBikeArray.add(e);

            }catch(Exception e){}
            displayBikes("basic");            
                   
            }


    }
    private void a2ActionPerformed(java.awt.event.ActionEvent evt) {   
            if(mountainBikeArray.size() != 100){
             try{
             MountainBike e = new MountainBike(Integer.parseInt(height.getText()), suspensionRadio.isSelected(), flatProofRadio.isSelected(), 
           Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
             mountainBikeArray.add(e);

            }catch(Exception e){}
            displayBikes("mountain");                
            }
      

    }
    private void a3ActionPerformed(java.awt.event.ActionEvent evt) { 
        if(roadBikeArray.size() != 100){
            try{
             RoadBike e = new RoadBike(Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText(), flatHandleRadio.isSelected()); 
             roadBikeArray.add(e);

            }catch(Exception e){}
            displayBikes("road");            
        }
        

    }    
    private void a4ActionPerformed(java.awt.event.ActionEvent evt) {
        if(eBikeArray.size() != 100){
        
        
            try{
             EBike e = new EBike(Integer.parseInt(miles.getText()), batteryType.getText(), Integer.parseInt(batterySize.getText()), Integer.parseInt(voltage.getText()),
          Integer.parseInt(motorPower.getText()), Integer.parseInt(height.getText()), suspensionRadio.isSelected(), flatProofRadio.isSelected(), Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
             eBikeArray.add(e);

            }catch(Exception e){}
            displayBikes("ebike");
            }
    }
    private void a5ActionPerformed(java.awt.event.ActionEvent evt) {  
        if(roadEBikeArray.size() != 100){
        try{
        RoadEBike e = new RoadEBike(hybridC.isSelected(), Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText(), flatHandleRadio.isSelected());
        roadEBikeArray.add(e);  
        }catch(Exception e){}
        
        displayBikes("roadEbike");
        }
    }
// -----------------------------------------------------------------------------
    
// remover action events--------------------------------------------------------     
    private void r1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r1ActionPerformed
        try{
            int pos = Integer.parseInt(enterText_toRemove.getText());   
            basicBikeArray.remove(pos);
        }catch(Exception e){enterText_toRemove.setText("invalid");}
        displayBikes("basic");
        
    }//GEN-LAST:event_r1ActionPerformed

    private void r2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2ActionPerformed
        try{
            int pos = Integer.parseInt(enterText_toRemove.getText());   
            mountainBikeArray.remove(pos);
        }catch(Exception e){enterText_toRemove.setText("invalid");}
        displayBikes("mountain");
    }//GEN-LAST:event_r2ActionPerformed

    private void enterText_toRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterText_toRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterText_toRemoveActionPerformed

    private void enterText_toModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterText_toModifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterText_toModifyActionPerformed

    private void r3ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            int pos = Integer.parseInt(enterText_toRemove.getText());   
            roadBikeArray.remove(pos);
        }catch(Exception e){enterText_toRemove.setText("invalid");} 
        displayBikes("road");
    }
    private void r4ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            int pos = Integer.parseInt(enterText_toRemove.getText());   
            eBikeArray.remove(pos);
        }catch(Exception e){enterText_toRemove.setText("invalid");}  
        displayBikes("Ebike");

    }
    
    private void r5ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            int pos = Integer.parseInt(enterText_toRemove.getText());   
            roadEBikeArray.remove(pos);
        }catch(Exception e){enterText_toRemove.setText("invalid");}    
        displayBikes("roadEbike");

    } 
    

//------------------------------------------------------------------------------

// modify action events---------------------------------------------------------
    private void m1ActionPerformed(java.awt.event.ActionEvent evt) {  
        int bike_index = Integer.parseInt(enterText_toModify.getText()); // the bike that needs changing
        BasicBike bike = basicBikeArray.get(bike_index);
        basicBikeArray.remove(bike_index);
        
        try{
        BasicBike e = new BasicBike(Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
        basicBikeArray.add(bike_index, e);

        }catch(Exception e){enterText_toModify.setText("invalid");}; 
        
        
        displayBikes("basic");

    } 
    private void m2ActionPerformed(java.awt.event.ActionEvent evt) {  
                                         
        int bike_index = Integer.parseInt(enterText_toModify.getText()); // the bike that needs changing
        MountainBike bike = mountainBikeArray.get(bike_index);
        mountainBikeArray.remove(bike_index);
        
        try{
             MountainBike e = new MountainBike(Integer.parseInt(height.getText()), suspensionRadio.isSelected(), flatProofRadio.isSelected(), 
           Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
             
             mountainBikeArray.add(bike_index, e);

        }catch(Exception e){enterText_toModify.setText("invalid");}
        
        displayBikes("mountain");


    }
    
    private void m3ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        int bike_index = Integer.parseInt(enterText_toModify.getText()); // the bike that needs changing
        RoadBike bike = roadBikeArray.get(bike_index);
        roadBikeArray.remove(bike_index);
            try{
             RoadBike e = new RoadBike(Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText(), flatHandleRadio.isSelected()); 
             roadBikeArray.add(e);

            }catch(Exception e){enterText_toModify.setText("invalid");}
        displayBikes("road");

        
    }
    private void m4ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        int bike_index = Integer.parseInt(enterText_toModify.getText()); // the bike that needs changing
        EBike bike = eBikeArray.get(bike_index); 
        eBikeArray.remove(bike_index);
            try{
             EBike e = new EBike(Integer.parseInt(miles.getText()), batteryType.getText(), Integer.parseInt(batterySize.getText()), Integer.parseInt(voltage.getText()),
          Integer.parseInt(motorPower.getText()), Integer.parseInt(height.getText()), suspensionRadio.isSelected(), flatProofRadio.isSelected(), Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText()); 
             eBikeArray.add(bike_index, e);

            }catch(Exception e){enterText_toModify.setText("invalid");}
            displayBikes("ebike");

    }
    private void m5ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        int bike_index = Integer.parseInt(enterText_toModify.getText()); // the bike that needs changing
        RoadEBike bike = roadEBikeArray.get(bike_index);   
        roadEBikeArray.remove(bike_index);
        try{
        RoadEBike e = new RoadEBike(hybridC.isSelected(), Integer.parseInt(mSpeed.getText()), Integer.parseInt(no_of_gears.getText()), color.getText(), safety_features.getText(), flatHandleRadio.isSelected());
        roadEBikeArray.add(bike_index, e);  
        }catch(Exception e){enterText_toModify.setText("invalid");}
        displayBikes("roadEbike");


    }   
    private void secretActionPerformed(java.awt.event.ActionEvent evt) {                                   
            try {
      Desktop.getDesktop().browse(new URI("https://youtu.be/xvFZjo5PgG0"));
    } catch (Exception e) {
      e.printStackTrace();
    }
    } 
    
//------------------------------------------------------------------------------
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(USTBikeShopPro_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(USTBikeShopPro_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(USTBikeShopPro_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(USTBikeShopPro_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new USTBikeShopPro_v2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton a1;
    private javax.swing.JButton a2;
    private javax.swing.JButton a3;
    private javax.swing.JButton a4;
    private javax.swing.JButton a5;
    private javax.swing.JLabel batterySLabel;
    private javax.swing.JTextField batterySize;
    private javax.swing.JLabel batteryTLabel;
    private javax.swing.JTextField batteryType;
    private javax.swing.JTextField color;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JButton d1;
    private javax.swing.JButton d2;
    private javax.swing.JButton d3;
    private javax.swing.JButton d4;
    private javax.swing.JButton d5;
    private javax.swing.JTable display_table;
    private javax.swing.JTextField enterText_toModify;
    private javax.swing.JTextField enterText_toRemove;
    private javax.swing.JRadioButton flatHandleRadio;
    private javax.swing.JRadioButton flatProofRadio;
    private javax.swing.JLabel gearsLabel;
    private javax.swing.JTextField height;
    private javax.swing.JRadioButton hybridC;
    private javax.swing.JButton jButton13;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton m1;
    private javax.swing.JButton m2;
    private javax.swing.JButton m3;
    private javax.swing.JButton m4;
    private javax.swing.JButton m5;
    private javax.swing.JTextField mSpeed;
    private javax.swing.JLabel maxSpeedLabel;
    private javax.swing.JTextField miles;
    private javax.swing.JLabel milesLable;
    private javax.swing.JLabel motorLabel;
    private javax.swing.JTextField motorPower;
    private javax.swing.JTextField no_of_gears;
    private javax.swing.JButton r1;
    private javax.swing.JButton r2;
    private javax.swing.JButton r3;
    private javax.swing.JButton r4;
    private javax.swing.JButton r5;
    private javax.swing.JLabel safeLabel;
    private javax.swing.JTextField safety_features;
    private javax.swing.JButton secret;
    private javax.swing.JRadioButton suspensionRadio;
    private javax.swing.JTextField voltage;
    private javax.swing.JLabel voltageLabel;
    // End of variables declaration//GEN-END:variables
    
    
    // methods------------------------------------------------------------------
    	public void displayBikes(String bikeType){ // creates the jtable. re-creates it every time the button is pressed
        
            	int i =0;
		ArrayList <String> tempSrtArray = new ArrayList<String>(); // rows
                
                DefaultTableModel model = (DefaultTableModel) display_table.getModel(); // gets the display bike table
                
                model.setRowCount(0); // resets the table so the info donst overlap
                model.setColumnCount(0);
                model.fireTableDataChanged(); // notifies the JTable that the model has changed


		model.addColumn("bike position"); // these 4 will apply to every bike
		model.addColumn("num of gears");
		model.addColumn("paint color");
		model.addColumn("safety features");
                model.addColumn("max speed");

		switch(bikeType){
			case("basic"):
                //header.add("current speed");

				for(BasicBike bike : basicBikeArray){
					tempSrtArray.add(i + ""); // index of the bike
                                        
                                        
					tempSrtArray.add(bike.noOfGears + "");
                                        
					tempSrtArray.add(bike.paintColor);
                                        
					tempSrtArray.add(bike.safetyFeatures);
                                       
                                        tempSrtArray.add(bike.maxSpeed + "");


					//tempSrtArray.add(bike.currSpeed + "");

					model.addRow(tempSrtArray.toArray());
					tempSrtArray.clear();
					i++;
				}
                                break;

			case("mountain"):
                                model.addColumn("seat height");
				model.addColumn("full suspension");
				model.addColumn("flat proof tyres");
				for(MountainBike bike : mountainBikeArray){
                                    
					tempSrtArray.add(i + "");
					tempSrtArray.add(bike.noOfGears + "");
                                        tempSrtArray.add(bike.paintColor);
                                        tempSrtArray.add(bike.safetyFeatures);
					tempSrtArray.add(bike.maxSpeed + "");
					// unqiue to mountain bike:
					tempSrtArray.add(bike.seatHeight + "");
					tempSrtArray.add(Boolean.toString(bike.fullSuspension));
					tempSrtArray.add(Boolean.toString(bike.flatProofTyres));

					model.addRow(tempSrtArray.toArray());
					tempSrtArray.clear();
					i++;
				}
                                break;



			case("road"):
                                model.addColumn("flat handle bar");
				for(RoadBike bike : roadBikeArray){
					tempSrtArray.add(i + "");
                                        tempSrtArray.add(bike.noOfGears + "");
				
					
					tempSrtArray.add(bike.paintColor);
                                        tempSrtArray.add(bike.safetyFeatures);
                                        tempSrtArray.add(bike.maxSpeed + "");
					
					// unique to road bike:
					tempSrtArray.add(Boolean.toString(bike.flatHandleBar));

					model.addRow(tempSrtArray.toArray());
					tempSrtArray.clear();
					i++;
				}
                                break;



			case("ebike"):
                                model.addColumn("seat height");
				model.addColumn("full suspension");
				model.addColumn("flat proof tyres");
				model.addColumn("range miles");
				model.addColumn("battery type");
				model.addColumn("battery size");
				model.addColumn("battery volt");
				model.addColumn("motor power");
				for(EBike bike : eBikeArray){
					tempSrtArray.add(i + "");
                                        tempSrtArray.add(bike.noOfGears + "");
					tempSrtArray.add(bike.paintColor);
                                        tempSrtArray.add(bike.safetyFeatures);
                                        tempSrtArray.add(bike.maxSpeed + "");
					
					tempSrtArray.add(bike.seatHeight + "");
					tempSrtArray.add(Boolean.toString(bike.fullSuspension));
					tempSrtArray.add(Boolean.toString(bike.flatProofTyres));

					tempSrtArray.add(bike.rangeMiles + "");
					tempSrtArray.add(bike.batteryType);
					tempSrtArray.add(bike.batterySize + "");
					tempSrtArray.add(bike.batteryVolt + "");
					tempSrtArray.add(bike.motorPower + "");

					model.addRow(tempSrtArray.toArray());
					tempSrtArray.clear();
					i++;
				}
                                break;



			case("roadEbike"):
                                model.addColumn("hybrid comfort");
				model.addColumn("flat handle bar");
				for(RoadEBike bike : roadEBikeArray){
					tempSrtArray.add(i + "");
                                        tempSrtArray.add(bike.noOfGears + "");
					tempSrtArray.add(bike.paintColor);
                                        tempSrtArray.add(bike.safetyFeatures);
                                        tempSrtArray.add(bike.maxSpeed + "");

					tempSrtArray.add(Boolean.toString(bike.hybridComfortBike));
                                        tempSrtArray.add(Boolean.toString(bike.flatHandleBar));


					model.addRow(tempSrtArray.toArray());
					tempSrtArray.clear();
					i++;
				}
                                break;


					
		}
                

             
        }
}
